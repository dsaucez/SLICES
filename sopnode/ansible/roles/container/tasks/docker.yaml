---
- name: Operate docker on ramdisk machines
  block:
  - name: Create docker systemd directory
    ansible.builtin.file:
      path: '/etc/systemd/system/docker.service.d/'
      state: directory
  - name: Support ramdisk when needed
    ansible.builtin.template:
      src: docker.service.d.j2
      dest: '/etc/systemd/system/docker.service.d/10-ramdisk.conf'
  when: (hostvars[inventory_hostname]['xx-ramdisk'] is defined) and (hostvars[inventory_hostname]['xx-ramdisk'])

- name: Custom docker root directory
  block:
  - name: Create docker systemd directory
    ansible.builtin.file:
      path: '/etc/systemd/system/docker.service.d/'
      state: directory
  - name: Change default docker root directory when needed
    ansible.builtin.template:
      src: docker.root.conf.j2
      dest: '/etc/systemd/system/docker.service.d/10-docker.root.conf'
  when: (hostvars[inventory_hostname]['xx-docker-root-home'] is defined)

- name: Custom docker systemd parameters
  block:
  - name: Create docker systemd directory
    ansible.builtin.file:
      path: '/etc/docker/'
      state: directory
  - name: Set content
    ansible.builtin.template:
      src: daemon.json.j2
      dest: '/etc/docker/daemon.json'
  when: (docker is defined)

- include_tasks: "{{ 'docker_' + (ansible_distribution | lower) + '.yaml' }}"

- name: Pre load images
  block:
  - name: Pull the images
    community.docker.docker_image:
      name: '{{ item.remote }}'
      source: pull
    with_items: '{{ docker.pull }}'
  - name: Local name 
    ansible.builtin.shell: 'docker tag {{ item.remote }} {{ item.local }}'
    with_items: '{{ docker.pull }}'
  when: (docker.pull is defined)

# install Go
- name: Download Go
  ansible.builtin.get_url:
    url: https://storage.googleapis.com/golang/getgo/installer_linux
    dest: './installer_linux'
    mode: '0500'
- name: Install Go
  ansible.builtin.shell: './installer_linux -version 1.18'

# install cri-dockerd
- name: Retrieve cri-dockerd (1/2)
  ansible.builtin.git:
    repo: https://github.com/Mirantis/cri-dockerd.git
    dest: cri-dockerd
    version: v0.3.1
    force: yes
- name: Retrieve cri-dockerd (2/2)
  ansible.builtin.file:
    path: ./cri-dockerd/bin
    state: directory

- name: Build cri-dockerd
  ansible.builtin.shell: '/root/.go/bin/go build -o bin/cri-dockerd'
  args:
    chdir: ./cri-dockerd
  environment:
    GOPATH: /root/.go

- name: Install cri-dockerd (1/4)
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory

- name: Install cri-dockerd (2/4)
  ansible.builtin.shell: 'install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd'
  args:
    chdir: ./cri-dockerd

- name: Install cri-dockerd (3/4)
  ansible.builtin.shell: 'cp -a packaging/systemd/* /etc/systemd/system'
  args:
   chdir: ./cri-dockerd

- name: Install cri-dockerd (4/4)
  ansible.builtin.shell: "sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service"
  args:
    chdir: ./cri-dockerd

- name: Enable and start cri-docker service
  ansible.builtin.systemd:
    name: cri-docker.service
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Enable and start cri-docker socket
  ansible.builtin.systemd:
    name: cri-docker.socket
    state: restarted
    enabled: yes
    daemon_reload: yes

# install Docker Compose
- name: Download Docker Compose
  ansible.builtin.get_url:
    url: 'https://github.com/docker/compose/releases/download/{{ k8s.compose | default(docker_compose) }}/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}'
    dest: '/usr/local/bin/docker-compose-{{ k8s.compose | default(docker_compose) }}-{{ ansible_system | lower }}-{{ ansible_architecture }}'
    mode: '0555'
- name: Install Docker Compose
  ansible.builtin.file:
    src: /usr/local/bin/docker-compose-{{ k8s.compose | default(docker_compose) }}-{{ ansible_system | lower }}-{{ ansible_architecture }}
    dest: /usr/local/bin/docker-compose
    state: link
